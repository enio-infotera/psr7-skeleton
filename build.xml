<?xml version="1.0" encoding="UTF-8"?>
<project name="webapp" default="noop">

    <target name="noop"/>
    <property environment="env"/>

    <tstamp>
        <format property="now" pattern="yyyy-MM-dd HH:mm:ss" locale="en,UK"/>
        <format property="now_num" pattern="yyyyMMddHHmmss" locale="en,UK"/>
        <format property="now_file" pattern="yyyy-MM-dd_HHmmss" locale="en,UK"/>
    </tstamp>

    <condition property="ext" value=".bat" else="">
        <os family="windows"/>
    </condition>

    <target name="cc" description="Clear application cache">
        <echo>Clear cache</echo>

        <delete dir="${basedir}/tmp/assets-cache/"/>
        <mkdir dir="${basedir}/tmp/assets-cache"/>
        <chmod file="${basedir}/tmp/assets-cache" perm="775"/>

        <delete dir="${basedir}/tmp/twig-cache/"/>
        <mkdir dir="${basedir}/tmp/twig-cache"/>
        <chmod file="${basedir}/tmp/twig-cache" perm="775"/>

        <delete includeemptydirs="true">
            <fileset dir="${basedir}/tmp/logs">
                <include name="**/*"/>
                <exclude name="empty"/>
            </fileset>
        </delete>
        <mkdir dir="${basedir}/tmp/logs"/>
        <chmod file="${basedir}/tmp/logs" perm="775"/>

        <delete includeemptydirs="true">
            <fileset dir="${basedir}/public/cache">
                <include name="**/*"/>
                <exclude name=".htaccess"/>
            </fileset>
        </delete>
    </target>

    <target name="lint">
        <apply executable="php" failonerror="true" verbose="true">
            <arg value="-l"/>
            <fileset dir="${basedir}">
                <include name="**/config/*.php"/>
                <include name="**/src/**/*.php"/>
                <exclude name="**/vendor/**"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true"
              failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
        </exec>
    </target>

    <target name="phpunit-coverage" description="Run unit tests with PHPUnit with coverage">
        <delete dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <exec executable="${basedir}/vendor/bin/phpunit${ext}" searchpath="true" resolveexecutable="true"
              failonerror="true" taskname="phpunit-coverage">
            <arg value="--coverage-text"/>
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
            <arg value="--coverage-clover"/>
            <arg path="${basedir}/build/logs/clover.xml"/>
            <arg value="--coverage-html"/>
            <arg path="${basedir}/build/coverage"/>
        </exec>
    </target>

    <target name="phpstan" description="PHP Static Analysis Tool - discover bugs in your code without running it">
        <mkdir dir="${basedir}/build"/>
        <exec executable="php" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg value="${basedir}/vendor/phpstan/phpstan-shim/phpstan.phar"/>
            <arg value="analyse"/>
            <arg value="-l"/>
            <arg value="max"/>
            <arg value="-c"/>
            <arg path="${basedir}/phpstan.neon"/>
            <arg value="src"/>
            <arg value="tests"/>
            <arg value="--no-interaction"/>
            <arg value="--no-progress"/>
        </exec>
    </target>

    <target name="fix-style" description="Code style fixer">
        <mkdir dir="${basedir}/build"/>
        <get src="https://cs.symfony.com/download/php-cs-fixer-v2.phar" dest="${basedir}/build/php-cs-fixer.phar"
             skipexisting="true"/>
        <exec executable="php" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg value="${basedir}/build/php-cs-fixer.phar"/>
            <arg line="fix --config=.cs.php"/>
        </exec>
    </target>

    <target name="check-style" description="Code style checker">
        <mkdir dir="${basedir}/build"/>
        <get src="https://cs.symfony.com/download/php-cs-fixer-v2.phar" dest="${basedir}/build/php-cs-fixer.phar"
             skipexisting="true"/>
        <exec executable="php" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg value="${basedir}/build/php-cs-fixer.phar"/>
            <arg line="fix --dry-run --format=txt --verbose --diff --diff-format=udiff --config=.cs.php"/>
        </exec>
    </target>

    <target name="check-all" depends="lint,check-style,phpstan,phpunit-coverage"/>

    <target name="build">
        <mkdir dir="${basedir}/build"/>

        <!-- Load properties -->
        <property file="${basedir}/config/ant.properties"/>

        <!-- Get composer.phar if not existing -->
        <get src="https://getcomposer.org/composer.phar" dest="${basedir}/build/composer.phar" skipexisting="true"/>

        <!-- Delete build/master -->
        <delete dir="${basedir}/build/master"/>

        <!-- Get master branch from GitHub -->
        <exec executable="git" failonerror="true">
            <arg line="archive --format zip --output ${basedir}/build/master.zip master"/>
        </exec>

        <!-- Unzip master branch -->
        <unzip src="${basedir}/build/master.zip" dest="${basedir}/build/master/"/>

        <!-- Delete zipped master branch -->
        <delete file="${basedir}/build/master.zip"/>

        <!-- Install composer packages -->
        <exec executable="php" failonerror="true">
            <arg line="${basedir}/build/composer.phar install --no-dev --optimize-autoloader -d ${basedir}/build/master"/>
        </exec>

        <!-- Remove files which aren't needed on the server -->
        <delete>
            <fileset dir="${basedir}/build/master/config/" casesensitive="no">
                <include name="env.php"/>
                <include name="*.properties"/>
            </fileset>
        </delete>

        <delete>
            <fileset dir="${basedir}/build/master/" casesensitive="no">
                <include name="composer.json"/>
                <include name="**/composer.lock"/>
                <include name="**/phpunit.xml*"/>
                <include name="**/*.gitignore"/>
                <include name="**/*.codeclimate.yml"/>
                <include name="**/*.editorconfig*"/>
                <include name="**/*.styleci.yml"/>
                <include name="**/*.scrutinizer.yml"/>
                <include name="**/*.travis.yml"/>
                <include name="**/*.appveyor.yml"/>
                <include name="**/*.coveralls.yml"/>
                <include name="**/mkdocs.yml"/>
                <include name="**/phpstan.neon"/>
                <include name="**/appveyor.yml"/>
                <include name="**/build.xml"/>
                <include name="**/.eslintrc.json"/>
                <include name="**/.gitignore"/>
                <include name="**/.gitattributes"/>
                <include name="**/.cs.php"/>
                <include name="**/.phpstorm.meta.php"/>
                <include name="**/CHANGELOG.md"/>
                <include name="**/CONDUCT.md"/>
                <include name="**/LICENSE*"/>
                <include name="**/README*"/>
                <include name="**/CHANGES*"/>
                <include name="**/CONTRIBUTING*"/>
                <include name="**/UPGRADE*.md"/>
            </fileset>
        </delete>

        <!-- Remove folders which aren't needed on the server -->
        <delete includeemptydirs="true">
            <fileset dir="${basedir}/build/master/" casesensitive="no">
                <include name="**/tests/"/>
                <include name="**/test/"/>
                <include name="**/tester/"/>
                <include name="**/docs/"/>
                <include name="**/doc/"/>
                <include name="**/examples/"/>
                <include name="**/example/"/>
            </fileset>
        </delete>

        <!-- Zip master brunch -->
        <zip destfile="${basedir}/build/my_app_${now_file}.zip">
            <zipfileset dir="${basedir}/build/master"/>
        </zip>
    </target>

    <target name="update-assets">
        <property name="node_modules_dir" value="${basedir}/node_modules"/>
        <property name="public_dir" value="${basedir}/public"/>

        <condition property="npm_ext" value=".cmd" else="">
            <os family="windows"/>
        </condition>

        <delete dir="${node_modules_dir}"/>

        <!-- Install npm packages -->
        <exec executable="npm${npm_ext}" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg line="update"/>
        </exec>

        <!-- Copy assets to the public directory -->
        <copy file="${node_modules_dir}/bootstrap/dist/css/bootstrap.css" todir="${public_dir}/css" overwrite="true"/>
        <copy file="${node_modules_dir}/bootstrap/dist/css/bootstrap.css.map" todir="${public_dir}/css" overwrite="true"/>
        <copy file="${node_modules_dir}/bootstrap/dist/css/bootstrap.min.css" todir="${public_dir}/css" overwrite="true"/>
        <copy file="${node_modules_dir}/bootstrap/dist/css/bootstrap.min.css.map" todir="${public_dir}/css" overwrite="true"/>

        <copy file="${node_modules_dir}/@fortawesome/fontawesome-free/css/all.css"
              tofile="${public_dir}/css/fontawesome-all.css" overwrite="true"/>
        <copy file="${node_modules_dir}/@fortawesome/fontawesome-free/css/all.min.css"
              tofile="${public_dir}/css/fontawesome-all.min.css" overwrite="true"/>
        <copy todir="${public_dir}/webfonts" overwrite="true">
            <fileset dir="${node_modules_dir}/@fortawesome/fontawesome-free/webfonts"/>
        </copy>

        <copy file="${node_modules_dir}/bootstrap/dist/js/bootstrap.js" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/bootstrap/dist/js/bootstrap.js.map" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/bootstrap/dist/js/bootstrap.min.js" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/bootstrap/dist/js/bootstrap.min.js.map" todir="${public_dir}/js" overwrite="true"/>

        <copy file="${node_modules_dir}/popper.js/dist/umd/popper.js" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/popper.js/dist/umd/popper.js.map" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/popper.js/dist/umd/popper.min.js" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/popper.js/dist/umd/popper.min.js.map" todir="${public_dir}/js" overwrite="true"/>

        <copy file="${node_modules_dir}/jquery/dist/jquery.js" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/jquery/dist/jquery.min.js" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/jquery/dist/jquery.min.map" todir="${public_dir}/js" overwrite="true"/>

        <copy file="${node_modules_dir}/datatables.net/js/jquery.dataTables.js" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/datatables.net/js/jquery.dataTables.min.js" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/datatables.net-bs4/css/dataTables.bootstrap4.css" todir="${public_dir}/css" overwrite="true"/>
        <copy file="${node_modules_dir}/datatables.net-bs4/css/dataTables.bootstrap4.min.css" todir="${public_dir}/css" overwrite="true"/>
        <copy file="${node_modules_dir}/datatables.net-bs4/js/dataTables.bootstrap4.js" todir="${public_dir}/js" overwrite="true"/>
        <copy file="${node_modules_dir}/datatables.net-bs4/js/dataTables.bootstrap4.min.js" todir="${public_dir}/js" overwrite="true"/>

        <delete dir="${node_modules_dir}"/>
    </target>

    <target name="seed-database" description="Data seeding">
        <exec executable="${basedir}/vendor/bin/phinx${ext}" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg line="seed:run -c ${basedir}/config/phinx.php"/>
        </exec>
    </target>

    <target name="migrate-database" description="Migrate database">
        <exec executable="${basedir}/vendor/bin/phinx${ext}" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg line="migrate -c ${basedir}/config/phinx.php"/>
        </exec>
    </target>

    <target name="reset-database" description="Data seeding">
        <exec executable="php" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg line="${basedir}/slim reset-database"/>
        </exec>
    </target>

    <target name="refresh-database" description="Reset, migrate and seed database">
        <antcall target="reset-database" />
        <antcall target="migrate-database" />
        <antcall target="seed-database" />
    </target>

    <target name="create-migration" description="Create a empty migration">
        <input message="Enter the name of the migration" addproperty="migration_name"/>

        <exec executable="${basedir}/vendor/bin/phinx${ext}" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg line="create ${migration_name} -c ${basedir}/config/phinx.php"/>
        </exec>
    </target>

    <target name="generate-migration" description="Generate database migration">
        <input message="Enter the name of the migration" addproperty="migration_name"/>

        <exec executable="${basedir}/vendor/bin/phinx-migrations${ext}" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg line="generate --name ${migration_name} --overwrite -c ${basedir}/config/phinx.php"/>
        </exec>
    </target>

    <target name="parse-text" description="Parse text">
        <exec executable="php" searchpath="true" resolveexecutable="true" failonerror="true">
            <arg line="${basedir}/slim parse-text"/>
        </exec>
    </target>

</project>
